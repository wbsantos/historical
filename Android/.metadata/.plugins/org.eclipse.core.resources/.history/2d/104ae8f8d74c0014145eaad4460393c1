package com.avatarbatterywallpaper;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Rect;
import android.os.BatteryManager;
import android.os.Handler;
import android.service.wallpaper.WallpaperService;
import android.util.Log;
import android.view.SurfaceHolder;
import android.content.Intent;

public abstract class AvatarWallpaperService extends WallpaperService 
{
	@Override
	public Engine onCreateEngine() {
		return new AvatarEngine();
	}
	
	public abstract int getWallpaperId(int i);

	private class AvatarEngine extends Engine
	{
		private Rect rectBackground;
		private Bitmap bmpBackground = null;
		private int backgroundResourceId = -1;
		private int batteryLevel = 0;
		private final Handler handler = new Handler();
		private final int BATTERY_STEP = 5;
		IntentFilter batteryLevelFilter;
		BroadcastReceiver batteryLevelReceiver;
		
	    private final Runnable drawRunner = new Runnable() {
	      @Override
	      public void run() {
	        draw();
	      }

	    };
	    
	    @Override
	    public void onCreate(SurfaceHolder surfaceHolder)
	    {
	    	super.onCreate(surfaceHolder);
	    	
	    	try
	    	{
		    	batteryLevelFilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
			    batteryLevel = getBatteryLevel(registerReceiver(null, batteryLevelFilter));
			    handler.post(drawRunner);
	    	}
	    	catch (IllegalArgumentException e){

	        }
		    
			batteryLevelReceiver = new BroadcastReceiver() {
		         public void onReceive(Context context, Intent intent) {
		             batteryLevel = getBatteryLevel(intent);
		             handler.post(drawRunner);
		         }
		     };	
	    }
	    
	    @Override
	    public void onDestroy()
	    {
	    	try
	    	{
	    		if(bmpBackground != null)
	    			bmpBackground.recycle();
		    	unregisterReceiver(batteryLevelReceiver);
				handler.removeCallbacks(drawRunner);
	    	}
	    	catch (IllegalArgumentException e){

	        }
	    }
	    
	    @Override
		public void onVisibilityChanged(boolean visible)
		{
			if(visible)
			{
				try
				{
					registerReceiver(batteryLevelReceiver, batteryLevelFilter);
					batteryLevel = getBatteryLevel(registerReceiver(null, batteryLevelFilter));
					handler.post(drawRunner);
				}
				catch (IllegalArgumentException e){
					
		        }
			}
			else
			{
				try
				{
					unregisterReceiver(batteryLevelReceiver);
					handler.removeCallbacks(drawRunner);
				}
				catch (IllegalArgumentException e){

		        }
			}
		}
	    
		@Override
		public void onSurfaceDestroyed(SurfaceHolder holder)
		{
			super.onSurfaceDestroyed(holder);
			handler.removeCallbacks(drawRunner);
		}
		
		 @Override
		 public void onSurfaceChanged(SurfaceHolder holder, int format, int width, int height) 
		 {
			 super.onSurfaceChanged(holder, format, width, height);
			 handler.post(drawRunner);
		 }
		 
		private int getBatteryLevel(Intent intent)
		{
			int currentLevel = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);
            int scale = intent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);
            int level = 0;
            if (currentLevel >= 0 && scale > 0) {
                level = (currentLevel * 100) / scale;
            }
            return level;
		}
		
		private int getWallpaperIndex(int factor)
		{
			int x = batteryLevel % factor;
			if(x < factor/2.0)
				x = batteryLevel - x;
			else
				x = batteryLevel + (factor - x);
			x /= factor;
			return x;
		}
		
		private void draw()
		{
			SurfaceHolder holder = getSurfaceHolder();
			Canvas canvas = null;		    
			
			canvas = holder.lockCanvas();
			if(canvas != null)
			{
				if(bmpBackground != null)
					bmpBackground.recycle();
				
				defineBackground(canvas);
				canvas.drawColor(Color.BLACK);					
				if(rectBackground == null)
				{
					int posLeftBackground = (int)(canvas.getWidth()/2.0 - bmpBackground.getWidth()/2.0);
					posLeftBackground *= -1;
					rectBackground = new Rect(posLeftBackground, 0, posLeftBackground +  canvas.getWidth(), canvas.getHeight());
				}
				
				canvas.drawBitmap(bmpBackground, -rectBackground.left, 0, null);
				
				holder.unlockCanvasAndPost(canvas);
			}			
			
			handler.removeCallbacks(drawRunner);
		}
		
		public void defineBackground(Canvas canvas) 
		{ 
			int resourceId = getWallpaperId(getWallpaperIndex(BATTERY_STEP));
			if(resourceId == backgroundResourceId && bmpBackground != null && !bmpBackground.isRecycled())
				return;
			else
				backgroundResourceId = resourceId;
			
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			options.inBitmap = true;
			options.inPurgeable = true;
			options.inInputShareable = true;
			BitmapFactory.decodeResource(getResources(), backgroundResourceId, options);
			
			int screenHeight = canvas.getHeight();
			float heightProportion = screenHeight / (float)options.outHeight;
			
			int width = (int)(options.outWidth * heightProportion);
			int height = (int)(options.outHeight * heightProportion);
			
			
		    options.inSampleSize = calculateInSampleSize(options, width, height);

		    // Decode bitmap with inSampleSize set
		    options.inJustDecodeBounds = false;
		    options.inDither = false;
		    options.inScaled = false;
		    bmpBackground = BitmapFactory.decodeResource(getResources(), resourceId, options);

		    // Resize
		    Matrix matrix = new Matrix();
		    matrix.postScale(heightProportion, heightProportion);
		    bmpBackground = Bitmap.createBitmap(bmpBackground, 0, 0, bmpBackground.getWidth(), bmpBackground.getHeight(), matrix, true);
			
		    /*
			Bitmap bitmap = BitmapFactory.decodeResource(
									AvatarApplication.getAppContext().getResources(), 
									resourceId);
			
			int screenHeight = canvas.getHeight();
			float heightProportion = screenHeight / (float)bitmap.getHeight();
			
			int width = (int)(bitmap.getWidth() * heightProportion);
			int height = (int)(bitmap.getHeight() * heightProportion);
			
			bmpBackground = Bitmap.createScaledBitmap(bitmap, width, height, false);*/
	    }
		
		public void defineBackground2(Canvas canvas) 
		{ 
			int resourceId = getWallpaperId(getWallpaperIndex(BATTERY_STEP));
			if(resourceId == backgroundResourceId && bmpBackground != null && !bmpBackground.isRecycled())
				return;
			else
				backgroundResourceId = resourceId;
			
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			options.inBitmap = true;
			options.inPurgeable = true;
			options.inInputShareable = true;
			BitmapFactory.decodeResource(getResources(), backgroundResourceId, options);
			
			int screenHeight = canvas.getHeight();
			float heightProportion = screenHeight / (float)options.outHeight;
			
			int width = (int)(options.outWidth * heightProportion);
			int height = (int)(options.outHeight * heightProportion);
			
			
		    options.inSampleSize = calculateInSampleSize(options, width, height);

		    // Decode bitmap with inSampleSize set
		    options.inJustDecodeBounds = false;
		    options.inDither = false;
		    options.inScaled = false;
		    bmpBackground = BitmapFactory.decodeResource(getResources(), resourceId, options);

		    // Resize
		    Matrix matrix = new Matrix();
		    matrix.postScale(heightProportion, heightProportion);
		    bmpBackground = Bitmap.createBitmap(bmpBackground, 0, 0, bmpBackground.getWidth(), bmpBackground.getHeight(), matrix, true);
			
		    /*
			Bitmap bitmap = BitmapFactory.decodeResource(
									AvatarApplication.getAppContext().getResources(), 
									resourceId);
			
			int screenHeight = canvas.getHeight();
			float heightProportion = screenHeight / (float)bitmap.getHeight();
			
			int width = (int)(bitmap.getWidth() * heightProportion);
			int height = (int)(bitmap.getHeight() * heightProportion);
			
			bmpBackground = Bitmap.createScaledBitmap(bitmap, width, height, false);*/
	    }
		
		public int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) 
		{
		    // Raw height and width of image
		    final int height = options.outHeight;
		    final int width = options.outWidth;
		    int inSampleSize = 1;
	
		    if (height > reqHeight || width > reqWidth) {
	
		        final int halfHeight = height / 2;
		        final int halfWidth = width / 2;
	
		        // Calculate the largest inSampleSize value that is a power of 2 and keeps both
		        // height and width larger than the requested height and width.
		        while ((halfHeight / inSampleSize) > reqHeight
		                && (halfWidth / inSampleSize) > reqWidth) {
		            inSampleSize *= 2;
		        }
		    }
	
		    return inSampleSize;
		}
		
		@Override
		public void onOffsetsChanged(float xOffset, float yOffset, float xOffsetStep, float yOffsetStep, int xPixelOffset, int yPixelOffset)
		{
			if(xOffsetStep > 0 && !AvatarApplication.getAlwaysCentralized())
			{
				SurfaceHolder holder = getSurfaceHolder();
				Canvas canvas = null;
				canvas = holder.lockCanvas();
				
				defineBackground(canvas);
				
				float widthFactor = canvas.getWidth()/(float)bmpBackground.getWidth();
				int posLeftBackground = (int)(((float)bmpBackground.getWidth() * (1 - widthFactor)) * xOffset);
				
				rectBackground = new Rect(posLeftBackground, 0, posLeftBackground +  canvas.getWidth(), canvas.getHeight());
								
				if(canvas != null)
				{
					canvas.drawColor(Color.BLACK);
					canvas.drawBitmap(bmpBackground, -posLeftBackground, 0, null);
					holder.unlockCanvasAndPost(canvas);
				}
			}
		}
	}
}
